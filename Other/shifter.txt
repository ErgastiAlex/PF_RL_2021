library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity RegShifter_PS is
	generic(
		n:	integer :=32
	);
	port(
		LD_SH:	in		std_logic;
		RESET:	in		std_logic;
		EN:		in		std_logic;
		CLK:		in		std_logic;
		SI:		in		std_logic;
		PI:		in		std_logic_vector(n-1 downto 0);
		SO:		out	std_logic;
		PO:		out	std_logic_vector(n-1 downto 0)
	);
end RegShifter_PS;

architecture RTL of RegShifter_PS is
	component FlipFlop_D is
		port(
			D: 		in		std_logic;
			R:			in	 	std_logic;
			EN:		in		std_logic;
			CLK:		in 	std_logic;
			Q: 		out 	std_logic
		);
	end component;
	signal PO_INTERNAL: std_logic_vector(n-1 downto 0);
	signal PI_INTERNAL: std_logic_vector(n-1 downto 0);
begin
	PI_INTERNAL(0)<=(PI(0) and LD_SH) or (SI and (not LD_SH));
	
	gen_pi_internal:for i in 1 to n-1 generate
		PI_INTERNAL(i)<=(PI(i) and LD_SH) or (PO_INTERNAL(i-1) and (not LD_SH));
	end generate;
	
	gen_ff_d:for i in 0 to n-1 generate
		ffd:FlipFlop_D port map(
			D=>PI_INTERNAL(i),
			R=>RESET,
			EN=>EN,
			CLK=>CLK,
			Q=>PO_INTERNAL(i)
		);
	end generate;
	
	PO<=PO_INTERNAL;
	SO<=PO_INTERNAL(n-1);

end RTL;

